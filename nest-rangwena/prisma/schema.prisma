// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  username        String            @unique
  email           String            @unique
  phoneNumber     String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  passwordDigest  String
  userRoles       UserRole[]
  OneTimePassword OneTimePassword[]
  suggestions     Suggestion[]
  reactions   SuggestionReaction[]
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String
}

model OneTimePassword {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  value     String
  createdAt DateTime @default(now())
}

model Suggestion {
  id          String    @id @default(uuid())
  title       String
  description String
  resolved    Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reactions   SuggestionReaction[]
}

model SuggestionReaction {
  id            String      @id @default(uuid())
  reaction      String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  suggestion    Suggestion  @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  suggestionId  String
}